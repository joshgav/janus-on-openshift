app:
  title: Janus on OpenShift (joshgav)
  baseUrl: https://backstage-${bs_app_name}.${openshift_ingress_domain}/
  # Plugin: Segment
  analytics:
    segment:
      writeKey: ${SEGMENT_WRITE_KEY}
      maskIP: ${SEGMENT_MASK_IP} # prevents IP addresses from being sent if true
      testMode: ${SEGMENT_TEST_MODE} # prevents data from being sent if true
  branding:
    fullLogo: ${BASE64_EMBEDDED_FULL_LOGO}
    iconLogo: ${BASE64_EMBEDDED_ICON_LOGO}
    theme:
      light:
        primaryColor: ${PRIMARY_LIGHT_COLOR}
        headerColor1: ${HEADER_LIGHT_COLOR_1}
        headerColor2: ${HEADER_LIGHT_COLOR_2}
        navigationIndicatorColor: ${NAV_INDICATOR_LIGHT_COLOR}
      dark:
        primaryColor: ${PRIMARY_DARK_COLOR}
        headerColor1: ${HEADER_DARK_COLOR_1}
        headerColor2: ${HEADER_DARK_COLOR_2}
        navigationIndicatorColor: ${NAV_INDICATOR_DARK_COLOR}

organization:
  name: joshgav @ Red Hat

backend:
  auth:
    keys:
    - secret: 'replacewithbase64secret'
  baseUrl: https://backstage-${bs_app_name}.${openshift_ingress_domain}/
  database:
    client: pg
    connection:
      # config options: https://node-postgres.com/apis/client
      host: backstage-pgcluster-rw
      port: 5432
      user: ${username}
      password: ${password}
      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
      # https://node-postgres.com/features/ssl
      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      ssl:
        ca: # if you have a CA file and want to verify it you can uncomment this section
          $file: /var/run/secrets/backstage-pgcluster-ca
  listen:
    port: 7007
  csp:
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
    connect-src:
      - "'self'"
      - 'http:'
      - 'https:'
    # Plugin: Jira
    img-src:
      # "'self'" and 'data' are from the backstage default but must be set since img-src is overwritten
      - "'self'"
      - 'data:'
      # Allow your Jira instance for @roadiehq/backstage-plugin-jira
      - ${JIRA_URL}
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      ## if using a PAT:
      # token: ${GITHUB_TOKEN}
      ## if using GitHub apps:
      apps:
        - $include: github-app-credentials.yaml

github-org-provider:
  id: production
  orgUrl: https://github.com/joshgav-org

proxy:
  endpoints:
    # Plugin: Quay
    '/quay/api':
      target: https://${registry_hostname}
      headers:
        X-Requested-With: 'XMLHttpRequest'
        Authorization: 'Bearer ${QUAY_TOKEN}'
      changeOrigin: true
      secure: true
      pathRewrite:
        '^/api/proxy/quay/api': '/'
    
  '/argocd/api':
    target: https://openshift-gitops-server-openshift-gitops.${openshift_ingress_domain}/api/v1
    changeOrigin: true
    secure: true
    pathRewrite:
      '^/api/proxy/argocd/api': '/'
    headers:
      # inject token as env var from secret
      Authorization: 'Bearer ${ARGOCD_AUTH_TOKEN}'

    # # Plugin: Quay
    # '/quay/api':
    #   target: https://quay.io/
    #   headers:
    #     X-Requested-With: 'XMLHttpRequest'
    #     # Uncomment the following line to access a private Quay Repository using a token
    #     # Authorization: 'Bearer <YOUR TOKEN>'
    #   changeOrigin: true
    #   secure: true

    # Plugin: SonarQube
    '/sonarqube':
      # if not using sonarqube, assign SONARQUBE_URL to https://sonarcloud.io
      # target: https://sonarcloud.io/api
      target: ${SONARQUBE_URL}/api
      allowedMethods: ['GET']
      auth: ${SONARQUBE_TOKEN}

    # Plugin: Jenkins
    '/jenkins/api':
      target: ${JENKINS_URL}
      headers:
        Authorization: ${JENKINS_TOKEN}

    # Plugin: Jira
    '/jira/api':
      target: ${JIRA_URL}
      headers:
        Authorization: ${JIRA_TOKEN}
        Accept: 'application/json'
        Content-Type: 'application/json'
        X-Atlassian-Token: 'no-check'
        User-Agent: ${JIRA_USER_AGENT}

    # Plugin: ACR
    '/acr/api':
      target: ${ACR_URL}
      changeOrigin: true
      headers:
        # If you use Bearer Token for authorization, please replace the 'Basic' with 'Bearer' in the following line.
        Authorization: 'Bearer ${ACR_AUTH_TOKEN}'
      # Change to "false" in case of using self hosted artifactory instance with a self-signed certificate
      secure: true

    # Plugin: Jfrog Artifactory
    '/jfrog-artifactory/api':
      target: ${ARTIFACTORY_URL}
      headers:
        Authorization: Bearer ${ARTIFACTORY_TOKEN}
      # Change to "false" in case of using self hosted artifactory instance with a self-signed certificate
      secure: ${ARTIFACTORY_SECURE}

    # Plugin: PagerDuty
    '/pagerduty':
      target: https://api.pagerduty.com
      headers:
        Authorization: Token token=${PAGERDUTY_TOKEN}

    # Plugin: Dynatrace
    '/dynatrace':
      target: ${DYNATRACE_API_URL}
      headers:
        # This API access token requires entities.read and problems.read permissions
        # For more info on how to generate this token: https://www.dynatrace.com/support/help/dynatrace-api/basics/dynatrace-api-authentication
        Authorization: 'Api-Token ${DYNATRACE_ACCESS_TOKEN}'

    # Plugin: Nexus Repository Manager
    '/nexus-repository-manager':
      target: ${NEXUS_REPOSITORY_MANAGER_URL}
      headers:
        X-Requested-With: 'XMLHttpRequest'
        # Uncomment the following line to access a private Nexus Repository Manager using a token
        # Authorization: 'Bearer <NEXUS_REPOSITORY_MANAGER_TOKEN>'
      changeOrigin: true
      # Change to "false" in case of using self hosted Nexus Repository Manager instance with a self-signed certificate
      secure: ${NEXUS_REPOSITORY_MANAGER_SECURE}

techdocs:
  builder: 'local'
  generator:
    runIn: 'local'
  publisher:
    type: 'local'

auth:
  environment: development
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers: {}

scaffolder: {}

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
  - allow: [Component, System, Group, Resource, Location, Template, API]
  locations:
  - type: url
    target: https://github.com/joshgav/spring-apiserver/blob/main/backstage-catalog-info.yaml
  - type: url
    target: https://github.com/joshgav/bs1/blob/main/catalog-info.yaml
  ## Backstage templates
  - type: url
    target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/remote-templates.yaml
  ## Janus (Red Hat) templates
  - type: url
    target: https://github.com/janus-idp/backstage-showcase/blob/main/catalog-entities/all.yaml
  - type: url
    target: https://github.com/janus-idp/software-templates/blob/main/showcase-templates.yaml
  providers:
    ocm:
      env:
        kubernetesPluginRef: local-cluster

# Plugin: PagerDuty
pagerduty:
  # uncomment the following, and provide a URL to override the default URL used for events
  # eventsBaseUrl: <PagerDuty Event URL>

# Plugin: Lighthouse
lighthouse:
  baseUrl: ${LIGHTHOUSE_BASEURL}

# Plugin: Dynatrace
dynatrace:
  baseUrl: ${DYNATRACE_URL}

# Plugin: Permission
permission:
  enabled: ${PERMISSION_ENABLED}

dynamicPlugins:
  rootDirectory: dynamic-plugins-root

kubernetes:
  serviceLocatorMethod:
    type: multiTenant
  clusterLocatorMethods:
    - type: config
      clusters:
        - url: https://kubernetes.default.svc/
          name: local-cluster
          caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          authProvider: serviceAccount
          # don't specify this attribute to force lookup in pod in cluster
          # serviceAccountToken: ''
          dashboardUrl: https://console-openshift-console.${openshift_ingress_domain}/
          dashboardApp: openshift
          skipTLSVerify: false
          skipMetricsLookup: false
  customResources:
    - group: tekton.dev
      apiVersion: v1beta1
      plural: pipelineruns
    - group: tekton.dev
      apiVersion: v1beta1
      plural: taskruns
    - group: 'route.openshift.io'
      apiVersion: 'v1'
      plural: 'routes'

argocd:
  appLocatorMethods:
    - type: config
      instances:
        - name: argo
          url: https://openshift-gitops-server-openshift-gitops.${openshift_ingress_domain}/
          token: ${ARGOCD_AUTH_TOKEN}

quay:
  uiUrl: 'https://${registry_hostname}'